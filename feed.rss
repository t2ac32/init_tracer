<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>[init] Tracer</title><description>A.I, VR, Mobile Dev, Electronics</description><link>https://t2ac32.github.io/init_tracer/</link><language>en</language><lastBuildDate>Wed, 26 Jan 2022 15:05:54 -0600</lastBuildDate><pubDate>Wed, 26 Jan 2022 15:05:54 -0600</pubDate><ttl>250</ttl><atom:link href="https://t2ac32.github.io/init_tracer/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/100DaysOfSwift_p1</guid><title>SwiftUI: Basic app structure</title><description></description><link>https://t2ac32.github.io/init_tracer/blog/100DaysOfSwift_p1</link><pubDate>Mon, 17 Jan 2022 12:06:00 -0600</pubDate><content:encoded><![CDATA[<h1>SwiftUI: Basic app structure</h1><h2>Project Navigator Structure</h2><p>Inside Xcode we should see the following file in the space on the left (Project Navigator):</p><ul><li><strong>AppName.swift:</strong> contains code for launching your app. If you create something when the app launches and keep it alive the entire time, you'll put it here.</li></ul><ul><li><strong>contentView.swift</strong> contains the initial user interface (UI) for the program, and is where we'll be doing all the work in this project.</li></ul><ul><li><strong>assets.xcassets</strong> the asset catalog, a collection of pictures that you want to use in your app. You can also add colors here, along with app icons. iMessage stickers, and more.</li></ul><ul><li><strong>Preview Content</strong> is a group , with Preview Assets.xcassets inside - tihs is another ssset catalog, this time specifically for example images you want to use when your're designing your user interfaces, to give you an idea of how they might look when the program is running.</li></ul><h2>Important First steps</h2><ul><li><strong>import SwiftUI:</strong> imports the SwiftUI framework</li><li><strong>struct ContentView:</strong> View new struct called ContentView, conforming to View protocol.<ul></ul></li></ul><ul><li>The <strong>'View'</strong> comes from SwiftUI, and is the protocol that must be adopted by anything you wnat to draw on the screen. (text, buttons, images)<ul></ul></li></ul><ul><li><strong>var body:</strong> some View, the type 'some View' means something conforming to the View protocol will be returned (our layout)<ul></ul></li></ul><h2>The view protocol</h2><p>This protocol has only one requirement: to have a computed property called body that returns 'some View'</p><h3>Modifiers</h3><p><strong>padding()</strong> method called on the text view, is and example of modifiers, which are regular methods with one small difference...<br><br> They always return a new view that contains both your original data, plus the extra modification you asked for.<br><br>## The Canvas</p><p>Automatically preview using one specific Apple device.</p><p>To change, look at the top center of your Xcode window for the current device, then click on it and select an alternative. This will also affect how your code is run in the virtual iOS simulator later on.</p><h3>Resume Automatic preview:</h3><pre><code>

- <span class="type">Resume</span> automatic preview.

## <span class="type">Creating</span> a form

<span class="type">Forms</span> are scroling lists of <span class="keyword">static</span> controls like text and images, but can also include user interactive controls like text fields, toggle switches, buttons and more.

<span class="type">To</span> create a basic form:

</code></pre><p>var body: some View { Form { Text("Hello, Tracer!").padding() }</p><pre><code>

*<span class="type">Limitations</span>:* <span class="type">SwiftUI</span> only allows <span class="number">10</span> items to be added to a form. <span class="type">This</span> limit applies to all childen inside a paren <span class="keyword">in</span> <span class="type">SwiftUI</span>.

## <span class="type">Groups
To</span> add more than <span class="number">10</span> children to a form we can use *<span class="type">Group</span>* structs.
<span class="type">This</span> doesn't change the look but works around the <span class="number">10</span> children limitation.

## <span class="type">Sections
This</span> applies a change of look to forms by splitting the items into chunks or sections. <span class="type">Sections</span> split forms into discrete visual groups just like the settings app does:
</code></pre><p>Form { Section { Text("Hello, world!") }</p><p>Section { Text("Hello, world!") Text("Hello, world!") } }</p><pre><code>

# **<span class="type">Navigation</span>:** <span class="type">NavigationView</span> and bars

## <span class="type">Adding</span> navigation bars
</code></pre><p>var body: some View { NavigationView { Form { Section { Text("Hello, Tracer!") }</p><p>Section { Text("This is section 2.") Text("Hello, world!") } }.navigationTitle("test bar") }.navigationBarTitle("Navbar title").navigationBarTitleDisplayMode(.inline)</p><p>}</p><pre><code>

# <span class="type">Modifying</span> program state
<span class="type">SwiftUI</span>’s views are a function of their state, we mean that the way your user interface looks – the things people can see and what they can interact with – are determined by the state of your program.

</code></pre><p>struct ContentView: View { var tapCount = 0</p><p>var body: some View { Button("Tap Count: (tapCount)") { tapCount += 1 } } }</p><pre><code>

<span class="type">ContentView</span> <span class="keyword">is</span> a <span class="keyword">struct</span>, structs are *immutable , the code above will give us an mutability error.

## *property wrapper*
<span class="type">Property</span> wrappers are special attributes we can place before our properties that effectively gives them <span class="keyword">super</span>-powers.

## <span class="keyword">@State</span> wrapper
**<span class="keyword">@State</span>** allows us to work around the limitation of structs: we know we can’t change their properties because structs are fixed, but <span class="keyword">@State</span> allows that value to be stored separately by <span class="type">SwiftUI</span> <span class="keyword">in</span> a place that can be modified.

</code></pre><p>struct ContentView: View { @State var tapCount = 0</p><p>var body: some View { Button("Tap Count: (tapCount)") { self.tapCount += 1 } } }</p><pre><code>***<span class="type">Tip</span>:*  <span class="keyword">@State is</span> specifically designed <span class="keyword">for</span> simple properties that are stored <span class="keyword">in</span> one view. <span class="type">As</span> a result, <span class="type">Apple</span> recommends we add <span class="keyword">private</span> access control to those properties, like this:    

</code></pre><p>@State private var tapCount = 0.</p><pre><code>

## <span class="type">Binding</span> state to <span class="type">UI</span> controls

<span class="type">The</span> problem <span class="keyword">is</span> that <span class="type">Swift</span> differentiates between “show the value of this property here” and “show the value of this property here, but write any changes back to the property.”

## *two-way binding*
<span class="type">We</span> bind the text field so that it shows the value of our property, but we also bind it so that any changes to the <span class="type">UI CONTROL</span> also update the property.

<span class="type">In Swift</span>, we mark these two-way bindings with a special symbol so they stand out: we write a *dollar sign* before them.

</code></pre><p>struct ContentView: View { @State private var name = ""</p><p>var body: some View { Form { TextField("Enter your name", text: $name) Text("Hello, world!") } } }</p><pre><code>

## <span class="type">Views</span> <span class="keyword">in</span> a loop

### <span class="type">The</span> forEach view:

<span class="type">This SwfitUI</span> view can loop over arrays and ranges, creating <span class="keyword">as</span> many views <span class="keyword">as</span> needed. <span class="type">Even</span> better, this view doesn't <span class="keyword">get</span> git by the <span class="number">10</span>-view limit.

<span class="type">ForEeach</span> runs a closure once <span class="keyword">for</span> every item it loops over, passing <span class="keyword">in</span> the current loop item.

<span class="type">For</span> example, this creates a form with <span class="number">100</span> rows:
</code></pre><p>Form { ForEach(0..&lt;100) { number in Text("Row (number)") } }</p><p>shorthanded version since ForEach passes a closure Form { ForEach(0..&lt;100) { number in Text("Row ($0)") } }</p><pre><code>

### <span class="type">Use</span> <span class="keyword">case</span>

<span class="type">ForEach</span> <span class="keyword">is</span> particularly useful when working with <span class="type">SwiftUI</span>’s <span class="type">Picker</span> view,
<span class="type">Example</span> define a view that:

<span class="number">1</span>. <span class="type">Has</span> an array of possible student names.
<span class="number">2</span>. <span class="type">Has</span> an <span class="keyword">@State</span> property storing the currently selected student.
<span class="number">3</span>. <span class="type">Creates</span> a <span class="type">Picker</span> view asking users to select their favorite, using a two-way binding to the <span class="keyword">@State</span> property.
<span class="number">4</span>. <span class="type">Uses ForEach</span> to loop over all possible student names, turning them into a text view.

</code></pre><p>struct ContentView: View { let students = ["Harry", "Hermione", "Ron"] @State private var selectedStudent = "Harry"</p><p>var body: some View { NavigationView { Form { Picker("Select your student", selection: $selectedStudent) { ForEach(students, id: .self) { Text($0) } } } } } }</p><pre><code>

- **note:**  *id: \.<span class="keyword">self</span>* part <span class="keyword">is</span> important. <span class="type">This</span> exists because <span class="type">SwiftUI</span> needs to be able to identify every view on the screen uniquely, so it can detect when things chang
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/first-post</guid><title>My first post</title><description>A description of my first post.</description><link>https://t2ac32.github.io/init_tracer/blog/first-post</link><pubDate>Fri, 26 Nov 2021 16:53:00 -0600</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/post%20copy%202</guid><title>My first post</title><description>A description of my first post.</description><link>https://t2ac32.github.io/init_tracer/blog/post%20copy%202</link><pubDate>Fri, 26 Nov 2021 16:53:00 -0600</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/post%20copy%203</guid><title>My first post</title><description>A description of my first post.</description><link>https://t2ac32.github.io/init_tracer/blog/post%20copy%203</link><pubDate>Fri, 26 Nov 2021 16:53:00 -0600</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/post%20copy%204</guid><title>My first post</title><description>A description of my first post.</description><link>https://t2ac32.github.io/init_tracer/blog/post%20copy%204</link><pubDate>Fri, 26 Nov 2021 16:53:00 -0600</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/post%20copy%205</guid><title>My first post</title><description>A description of my first post.</description><link>https://t2ac32.github.io/init_tracer/blog/post%20copy%205</link><pubDate>Fri, 26 Nov 2021 16:53:00 -0600</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/post%20copy%206</guid><title>My first post</title><description>A description of my first post.</description><link>https://t2ac32.github.io/init_tracer/blog/post%20copy%206</link><pubDate>Fri, 26 Nov 2021 16:53:00 -0600</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://t2ac32.github.io/init_tracer/blog/first-post%20copy</guid><title>My list of Publish plugins</title><description></description><link>https://t2ac32.github.io/init_tracer/blog/first-post%20copy</link><pubDate>Sat, 6 Jun 2020 12:06:00 -0500</pubDate><content:encoded><![CDATA[<p>If you have already read my posts about getting started with publish and automatic your deploy, you may also be interested in what plugins I use to make my life easier. This is my list of Publish plugins:</p><h2>Splash</h2><p>This is the more obvious one. If you’re using Publish to deploy your site, is quite possible you are interested in showing code snippets in your posts. Splash is also created by John Sundell and it creates a nice HTML formatted snipped from Swift code. You have other options for other languages, but if you’re just interested in Swift Splash is the best option.</p><h3>How to add it</h3><p>You can add Splash to your project using:</p><pre><code>.<span class="call">package</span>(url: <span class="string">"https://github.com/johnsundell/splashpublishplugin"</span>, from: <span class="string">"0.1.0"</span>)
</code></pre><h2>Generate CNAME</h2><p>This one is interesting if you’re publishing using Github Pages. It allows you to declare the custom domain urls that can access your blog using a CNAME registry in your domain DNS. If you like to have everything under source control this is the best option.</p><h3>How to add it</h3><p>You can add Splash to your project using:</p><pre><code>.<span class="call">package</span>(url: <span class="string">"https://github.com/SwiftyGuerrero/CNAMEPublishPlugin"</span>, from: <span class="string">"0.1.0"</span>)
</code></pre><h2>Verify Resources Exists</h2><p>I’m not using many images on my blog posts but this plugin ensures that when I do the image is there. With an automated site deploy this becomes more interesting as I don’t preview the site before pushing to remote. If some file is missing the deploy will fail and I’ll now before a broken blog gets published.</p><h3>How to add it</h3><p>You can add Splash to your project using:</p><pre><code>.<span class="call">package</span>(url: <span class="string">"https://github.com/wacumov/VerifyResourcesExistPublishPlugin"</span>, from: <span class="string">"0.1.0"</span>)
</code></pre><h2>Custom 404 page</h2><p>This one is just a custom plugin I added to my blog. When I moved to Publish I didn’t care much about my previous blog urls so all the links and SEO I had got lost. Each time someone used one of those links they will just get a Github 404 page.</p><p>I fixed this by adding my own 404 page that does a redirection using JavaScript and a simple url replacement. This is far from good for SEO but to be honest I just wanted old links to work for humans.</p><p>The plugin code is:</p><pre><code>.<span class="keyword">init</span>(name: <span class="string">"Include 404"</span>, installer: { context <span class="keyword">in
            try</span> context.<span class="call">copyFileToOutput</span>(from: <span class="string">"Content/404.html"</span>)
        })
</code></pre><p>You can check my custom 404 file in my blog repository. Feel free to copy or suggest improvements.</p>]]></content:encoded></item></channel></rss>